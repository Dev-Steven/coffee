{"ast":null,"code":"import coffees from '../apis/coffees';\nimport { ADD_TO_CART } from '../actions/types';\nexport default (async (state = {}, action) => {\n  switch (action.type) {\n    case ADD_TO_CART:\n      // first search the coffees to find the specific coffee - addedItem\n      let addedCoffee = await coffees.get(`/coffees?id=${action.payload.id}`); // check if item id exists in added items\n\n      let existedItem = await coffees.get(`/cart?id=${action.payload.id}`); // let existedItem = addedItems.find(item => action.id === item.id);\n      // ** Need to copy the whole object using ... for immutability\n      // console.log(addedCoffee.data);\n\n      console.log(existedItem.data); // console.log(action.payload.responseData);\n\n      console.log('existed id: ', existedItem.data.id);\n      console.log('action payload: ', action.payload.id); // if it does, update quantity and total price\n\n      if (existedItem.data.id === action.payload.id) {\n        console.log('item exists');\n        addedCoffee.data.quantity += 1;\n        return { // take state (empty obj) and copy everything from responseData into state\n          // then add the addedCoffee into there\n          ...state,\n          ...action.payload.responseData,\n          total: action.payload.responseData.total + parseInt(addedCoffee.data.price)\n        };\n      } else {\n        // otherwise, add new item to added items where quntity = 1 and add to total price\n        console.log('item not in cart');\n        addedCoffee.quantity = 1;\n        let newTotal = action.payload.responseData.total + parseInt(addedCoffee.data.price);\n        console.log('new total: ', newTotal); // return { ...state, [action.payload.id]: action.payload }\n        // return { ...state, ...action.payload.responseData, total: 1 };\n      }\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/stevenchung/Documents/react/coffee/client/src/reducers/cartReducer.js"],"names":["coffees","ADD_TO_CART","state","action","type","addedCoffee","get","payload","id","existedItem","console","log","data","quantity","responseData","total","parseInt","price","newTotal"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,iBAApB;AACA,SAASC,WAAT,QAA4B,kBAA5B;AAEA,gBAAe,OAAOC,KAAK,GAAG,EAAf,EAAmBC,MAAnB,KAA8B;AAC5C,UAAQA,MAAM,CAACC,IAAf;AACC,SAAKH,WAAL;AACC;AACA,UAAII,WAAW,GAAG,MAAML,OAAO,CAACM,GAAR,CACtB,eAAcH,MAAM,CAACI,OAAP,CAAeC,EAAG,EADV,CAAxB,CAFD,CAKC;;AACA,UAAIC,WAAW,GAAG,MAAMT,OAAO,CAACM,GAAR,CACtB,YAAWH,MAAM,CAACI,OAAP,CAAeC,EAAG,EADP,CAAxB,CAND,CASC;AAEA;AACA;;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYF,WAAW,CAACG,IAAxB,EAbD,CAcC;;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BF,WAAW,CAACG,IAAZ,CAAiBJ,EAA7C;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCR,MAAM,CAACI,OAAP,CAAeC,EAA/C,EAhBD,CAiBC;;AACA,UAAIC,WAAW,CAACG,IAAZ,CAAiBJ,EAAjB,KAAwBL,MAAM,CAACI,OAAP,CAAeC,EAA3C,EAA+C;AAC9CE,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACAN,QAAAA,WAAW,CAACO,IAAZ,CAAiBC,QAAjB,IAA6B,CAA7B;AACA,eAAO,EACN;AACA;AACA,aAAGX,KAHG;AAIN,aAAGC,MAAM,CAACI,OAAP,CAAeO,YAJZ;AAKNC,UAAAA,KAAK,EACJZ,MAAM,CAACI,OAAP,CAAeO,YAAf,CAA4BC,KAA5B,GACAC,QAAQ,CAACX,WAAW,CAACO,IAAZ,CAAiBK,KAAlB;AAPH,SAAP;AASA,OAZD,MAYO;AACN;AACAP,QAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AAEAN,QAAAA,WAAW,CAACQ,QAAZ,GAAuB,CAAvB;AACA,YAAIK,QAAQ,GACXf,MAAM,CAACI,OAAP,CAAeO,YAAf,CAA4BC,KAA5B,GACAC,QAAQ,CAACX,WAAW,CAACO,IAAZ,CAAiBK,KAAlB,CAFT;AAGAP,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BO,QAA3B,EARM,CAUN;AACA;AACA;;AACF;AACC,aAAOhB,KAAP;AA7CF;AA+CA,CAhDD","sourcesContent":["import coffees from '../apis/coffees';\nimport { ADD_TO_CART } from '../actions/types';\n\nexport default async (state = {}, action) => {\n\tswitch (action.type) {\n\t\tcase ADD_TO_CART:\n\t\t\t// first search the coffees to find the specific coffee - addedItem\n\t\t\tlet addedCoffee = await coffees.get(\n\t\t\t\t`/coffees?id=${action.payload.id}`\n\t\t\t);\n\t\t\t// check if item id exists in added items\n\t\t\tlet existedItem = await coffees.get(\n\t\t\t\t`/cart?id=${action.payload.id}`\n\t\t\t);\n\t\t\t// let existedItem = addedItems.find(item => action.id === item.id);\n\n\t\t\t// ** Need to copy the whole object using ... for immutability\n\t\t\t// console.log(addedCoffee.data);\n\t\t\tconsole.log(existedItem.data);\n\t\t\t// console.log(action.payload.responseData);\n\t\t\tconsole.log('existed id: ', existedItem.data.id);\n\t\t\tconsole.log('action payload: ', action.payload.id);\n\t\t\t// if it does, update quantity and total price\n\t\t\tif (existedItem.data.id === action.payload.id) {\n\t\t\t\tconsole.log('item exists');\n\t\t\t\taddedCoffee.data.quantity += 1;\n\t\t\t\treturn {\n\t\t\t\t\t// take state (empty obj) and copy everything from responseData into state\n\t\t\t\t\t// then add the addedCoffee into there\n\t\t\t\t\t...state,\n\t\t\t\t\t...action.payload.responseData,\n\t\t\t\t\ttotal:\n\t\t\t\t\t\taction.payload.responseData.total +\n\t\t\t\t\t\tparseInt(addedCoffee.data.price),\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\t// otherwise, add new item to added items where quntity = 1 and add to total price\n\t\t\t\tconsole.log('item not in cart');\n\n\t\t\t\taddedCoffee.quantity = 1;\n\t\t\t\tlet newTotal =\n\t\t\t\t\taction.payload.responseData.total +\n\t\t\t\t\tparseInt(addedCoffee.data.price);\n\t\t\t\tconsole.log('new total: ', newTotal);\n\n\t\t\t\t// return { ...state, [action.payload.id]: action.payload }\n\t\t\t\t// return { ...state, ...action.payload.responseData, total: 1 };\n\t\t\t}\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n"]},"metadata":{},"sourceType":"module"}