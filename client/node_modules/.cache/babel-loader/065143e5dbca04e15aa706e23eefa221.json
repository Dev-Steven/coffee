{"ast":null,"code":"import coffees from '../apis/coffees';\nimport { ADD_TO_CART } from '../actions/types';\nimport _ from 'lodash';\nexport default (async (state = {}, action) => {\n  switch (action.type) {\n    case ADD_TO_CART:\n      // first search the coffees to find the specific coffee - addedItem\n      let selectedCoffee = await coffees.get(`/coffees?id=${action.payload.id}`);\n      console.log('addedCoffee: ', selectedCoffee.data[0]);\n\n      let coffeeToAdd = _.cloneDeep(selectedCoffee.data[0]); // check if item id exists in added items\n\n\n      let cartArray = await coffees.get(`/cart?id=${action.payload.id}`);\n      let itemInCart = cartArray.data[0]; // ** Need to copy the whole object using ... for immutability\n      // if item in cart, update quantity and total price\n\n      if (itemInCart && itemInCart.id === action.payload.id) {\n        console.log('item in cart'); // take state (empty obj) and copy everything from responseData into state\n        // then add the addedCoffee into there\n      } // otherwise, add new item to cart\n      else {\n          console.log('item not in cart'); // create quantity property where quantity = 1\n\n          coffeeToAdd.quantity = 1;\n          console.log('coffeeToAdd: ', coffeeToAdd); // add to total price\n\n          let newTotal = coffeeToAdd.price + action.payload.total;\n          console.log('newTotal: ', newTotal);\n        }\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/stevenchung/Documents/react/coffee/client/src/reducers/cartReducer.js"],"names":["coffees","ADD_TO_CART","_","state","action","type","selectedCoffee","get","payload","id","console","log","data","coffeeToAdd","cloneDeep","cartArray","itemInCart","quantity","newTotal","price","total"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,iBAApB;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,OAAOC,CAAP,MAAc,QAAd;AAEA,gBAAe,OAAOC,KAAK,GAAG,EAAf,EAAmBC,MAAnB,KAA8B;AAC5C,UAAQA,MAAM,CAACC,IAAf;AACC,SAAKJ,WAAL;AACC;AACA,UAAIK,cAAc,GAAG,MAAMN,OAAO,CAACO,GAAR,CACzB,eAAcH,MAAM,CAACI,OAAP,CAAeC,EAAG,EADP,CAA3B;AAIAC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BL,cAAc,CAACM,IAAf,CAAoB,CAApB,CAA7B;;AAEA,UAAIC,WAAW,GAAGX,CAAC,CAACY,SAAF,CAAYR,cAAc,CAACM,IAAf,CAAoB,CAApB,CAAZ,CAAlB,CARD,CASC;;;AACA,UAAIG,SAAS,GAAG,MAAMf,OAAO,CAACO,GAAR,CAAa,YAAWH,MAAM,CAACI,OAAP,CAAeC,EAAG,EAA1C,CAAtB;AAEA,UAAIO,UAAU,GAAGD,SAAS,CAACH,IAAV,CAAe,CAAf,CAAjB,CAZD,CAcC;AAEA;;AACA,UAAII,UAAU,IAAIA,UAAU,CAACP,EAAX,KAAkBL,MAAM,CAACI,OAAP,CAAeC,EAAnD,EAAuD;AACtDC,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EADsD,CAEtD;AACA;AACA,OAJD,CAKA;AALA,WAMK;AACJD,UAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EADI,CAEJ;;AACAE,UAAAA,WAAW,CAACI,QAAZ,GAAuB,CAAvB;AACAP,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BE,WAA7B,EAJI,CAMJ;;AACA,cAAIK,QAAQ,GAAGL,WAAW,CAACM,KAAZ,GAAoBf,MAAM,CAACI,OAAP,CAAeY,KAAlD;AACAV,UAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BO,QAA1B;AACA;;AACF;AACC,aAAOf,KAAP;AAnCF;AAqCA,CAtCD","sourcesContent":["import coffees from '../apis/coffees';\nimport { ADD_TO_CART } from '../actions/types';\nimport _ from 'lodash';\n\nexport default async (state = {}, action) => {\n\tswitch (action.type) {\n\t\tcase ADD_TO_CART:\n\t\t\t// first search the coffees to find the specific coffee - addedItem\n\t\t\tlet selectedCoffee = await coffees.get(\n\t\t\t\t`/coffees?id=${action.payload.id}`\n\t\t\t);\n\n\t\t\tconsole.log('addedCoffee: ', selectedCoffee.data[0]);\n\n\t\t\tlet coffeeToAdd = _.cloneDeep(selectedCoffee.data[0]);\n\t\t\t// check if item id exists in added items\n\t\t\tlet cartArray = await coffees.get(`/cart?id=${action.payload.id}`);\n\n\t\t\tlet itemInCart = cartArray.data[0];\n\n\t\t\t// ** Need to copy the whole object using ... for immutability\n\n\t\t\t// if item in cart, update quantity and total price\n\t\t\tif (itemInCart && itemInCart.id === action.payload.id) {\n\t\t\t\tconsole.log('item in cart');\n\t\t\t\t// take state (empty obj) and copy everything from responseData into state\n\t\t\t\t// then add the addedCoffee into there\n\t\t\t}\n\t\t\t// otherwise, add new item to cart\n\t\t\telse {\n\t\t\t\tconsole.log('item not in cart');\n\t\t\t\t// create quantity property where quantity = 1\n\t\t\t\tcoffeeToAdd.quantity = 1;\n\t\t\t\tconsole.log('coffeeToAdd: ', coffeeToAdd);\n\n\t\t\t\t// add to total price\n\t\t\t\tlet newTotal = coffeeToAdd.price + action.payload.total;\n\t\t\t\tconsole.log('newTotal: ', newTotal);\n\t\t\t}\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n"]},"metadata":{},"sourceType":"module"}