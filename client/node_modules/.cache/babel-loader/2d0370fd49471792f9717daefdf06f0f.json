{"ast":null,"code":"import coffees from '../apis/coffees';\nimport { ADD_TO_CART } from '../actions/types';\nimport _ from 'lodash';\nexport default ((state = {}, action) => {\n  switch (action.type) {\n    case ADD_TO_CART:\n      let coffeeToAdd = _.cloneDeep(action.payload.selectedCoffee); // if item in cart, update quantity and total price\n\n\n      if (action.payload.itemExist && action.payload.itemExist.id === action.payload.id) {\n        console.log('item in cart'); // take state (empty obj) and copy everything from responseData into state\n        // then add the addedCoffee into there\n      } // otherwise, add new item to cart\n      else {\n          console.log('item not in cart'); // create quantity property where quantity = 1\n\n          coffeeToAdd.quantity = 1;\n          console.log('coffeeToAdd: ', coffeeToAdd); // add to total price\n\n          let newTotal = coffeeToAdd.price + action.payload.responseData[0].total;\n          console.log('newTotal: ', newTotal); // update db.json file\n\n          return { ...state,\n            // total: newTotal\n            total: newTotal,\n            // add new object coffeeToAdd\n            [action.payload.id]: coffeeToAdd\n          };\n        }\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/stevenchung/Documents/react/coffee/client/src/reducers/cartReducer.js"],"names":["coffees","ADD_TO_CART","_","state","action","type","coffeeToAdd","cloneDeep","payload","selectedCoffee","itemExist","id","console","log","quantity","newTotal","price","responseData","total"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,iBAApB;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,OAAOC,CAAP,MAAc,QAAd;AAEA,gBAAe,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AACtC,UAAQA,MAAM,CAACC,IAAf;AACC,SAAKJ,WAAL;AACC,UAAIK,WAAW,GAAGJ,CAAC,CAACK,SAAF,CAAYH,MAAM,CAACI,OAAP,CAAeC,cAA3B,CAAlB,CADD,CAGC;;;AACA,UACCL,MAAM,CAACI,OAAP,CAAeE,SAAf,IACAN,MAAM,CAACI,OAAP,CAAeE,SAAf,CAAyBC,EAAzB,KAAgCP,MAAM,CAACI,OAAP,CAAeG,EAFhD,EAGE;AACDC,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EADC,CAED;AACA;AACA,OAPD,CAQA;AARA,WASK;AACJD,UAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EADI,CAGJ;;AACAP,UAAAA,WAAW,CAACQ,QAAZ,GAAuB,CAAvB;AACAF,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BP,WAA7B,EALI,CAOJ;;AACA,cAAIS,QAAQ,GACXT,WAAW,CAACU,KAAZ,GAAoBZ,MAAM,CAACI,OAAP,CAAeS,YAAf,CAA4B,CAA5B,EAA+BC,KADpD;AAEAN,UAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BE,QAA1B,EAVI,CAYJ;;AACA,iBAAO,EACN,GAAGZ,KADG;AAEN;AACAe,YAAAA,KAAK,EAAEH,QAHD;AAIN;AACA,aAACX,MAAM,CAACI,OAAP,CAAeG,EAAhB,GAAqBL;AALf,WAAP;AAOA;;AACF;AACC,aAAOH,KAAP;AApCF;AAsCA,CAvCD","sourcesContent":["import coffees from '../apis/coffees';\nimport { ADD_TO_CART } from '../actions/types';\nimport _ from 'lodash';\n\nexport default (state = {}, action) => {\n\tswitch (action.type) {\n\t\tcase ADD_TO_CART:\n\t\t\tlet coffeeToAdd = _.cloneDeep(action.payload.selectedCoffee);\n\n\t\t\t// if item in cart, update quantity and total price\n\t\t\tif (\n\t\t\t\taction.payload.itemExist &&\n\t\t\t\taction.payload.itemExist.id === action.payload.id\n\t\t\t) {\n\t\t\t\tconsole.log('item in cart');\n\t\t\t\t// take state (empty obj) and copy everything from responseData into state\n\t\t\t\t// then add the addedCoffee into there\n\t\t\t}\n\t\t\t// otherwise, add new item to cart\n\t\t\telse {\n\t\t\t\tconsole.log('item not in cart');\n\n\t\t\t\t// create quantity property where quantity = 1\n\t\t\t\tcoffeeToAdd.quantity = 1;\n\t\t\t\tconsole.log('coffeeToAdd: ', coffeeToAdd);\n\n\t\t\t\t// add to total price\n\t\t\t\tlet newTotal =\n\t\t\t\t\tcoffeeToAdd.price + action.payload.responseData[0].total;\n\t\t\t\tconsole.log('newTotal: ', newTotal);\n\n\t\t\t\t// update db.json file\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t// total: newTotal\n\t\t\t\t\ttotal: newTotal,\n\t\t\t\t\t// add new object coffeeToAdd\n\t\t\t\t\t[action.payload.id]: coffeeToAdd,\n\t\t\t\t};\n\t\t\t}\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n"]},"metadata":{},"sourceType":"module"}